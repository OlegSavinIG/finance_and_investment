services:
  # PostgreSQL - Основная база данных
  postgres-db:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # MySQL - Для хранения статистики
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # MongoDB - Хранение ордеров и финансовой статистики
  mongo-db:
    image: mongo:6.0
    container_name: mongo-db
    ports:
      - "${MONGO_PORT}:${MONGO_PORT}"
    volumes:
      - mongo-data:/data/db
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # ClickHouse - Аналитика действий с ордерами
  clickhouse-db:
    image: yandex/clickhouse-server:latest
    container_name: clickhouse-db
    ports:
      - "${CLICKHOUSE_PORT}:${CLICKHOUSE_PORT}"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CLICKHOUSE_PORT}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # Eureka Server
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    command: [ "java", "-jar", "app.jar" ]
    networks:
      - db-network
    environment:
      SPRING_SECURITY_USER_NAME: eureka
      SPRING_SECURITY_USER_PASSWORD: eureka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # Investment Module
  investment-module:
    build:
      context: ./investment
      dockerfile: Dockerfile
    container_name: investment-module
    depends_on:
      - mongo-db
      - eureka-server
      - rabbitmq
    environment:
      SPRING_APPLICATION_NAME: ${INVESTMENT_SERVICE_NAME}
      SERVER_PORT: ${INVESTMENT_SERVICE_PORT}
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_SERVER_URL}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_DATASOURCE_URL: mongodb://${MONGO_HOST}:${MONGO_PORT}/investment-db
    ports:
      - "${INVESTMENT_SERVICE_PORT}:${INVESTMENT_SERVICE_PORT}"
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${INVESTMENT_SERVICE_PORT}/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # User Module
  user-module:
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user-module
    depends_on:
      - postgres-db
      - eureka-server
      - rabbitmq
    environment:
      SPRING_APPLICATION_NAME: ${USER_SERVICE_NAME}
      SERVER_PORT: ${USER_SERVICE_PORT}
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_SERVER_URL}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    networks:
      - db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${USER_SERVICE_PORT}/actuator/health"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # Statistic Module
  statistic-module:
    build:
      context: ./statistics
      dockerfile: Dockerfile
    container_name: statistic-module
    depends_on:
      - mysql-db
      - eureka-server
      - rabbitmq
    environment:
      SPRING_APPLICATION_NAME: ${STATISTIC_SERVICE_NAME}
      SERVER_PORT: ${STATISTIC_SERVICE_PORT}
      EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE: ${EUREKA_SERVER_URL}
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:${MYSQL_PORT}/${MYSQL_DATABASE}?useSSL=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
    ports:
      - "${STATISTIC_SERVICE_PORT}:${STATISTIC_SERVICE_PORT}"
    networks:
      - db-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${STATISTIC_SERVICE_PORT}/actuator/health" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s


networks:
  db-network:
    name: finance_and_investment_db-network
    driver: bridge


volumes:
  postgres-data:
  mongo-data:
  clickhouse-data:
  mysql-data:
